#################################################################
#								#
# Copyright (c) 2007-2015 Fidelity National Information 	#
# Services, Inc. and/or its subsidiaries. All rights reserved.	#
#								#
# Copyright (c) 2018 YottaDB LLC. and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

#-----------------------------------------------
# Mumps error condition handler macros
#-----------------------------------------------
.ifdef cygwin
# This is provisionally bumped up by 8. It needs be be verified on a 64-bit cygwin computer
chnd_size	=	288
.else
chnd_size	=	232
.endif

chnd_save_active =	0
chnd_ch_active	=	8
chnd_ch		=	16
chnd_jmp	=	24

	.include "gtm_threadgbl_deftypes_asm.si"

	.data
	.extern	ctxt
	.extern gtm_threadgbl

	.text
	.extern gtm_asm_establish

.macro ESTABLISH labelend, labelskip
        call	gtm_asm_establish
	movq	ctxt(REG_IP), REG64_ACCUM
	leaq	mdb_condition_handler(REG_IP), REG64_SCRATCH1
	movq    REG64_SCRATCH1, chnd_ch(%rax)		# ctxt->ch = x
	addq	$chnd_jmp, REG64_ACCUM			# setjmp(ctxt->jmp)
	movq	$0, REG64_ARG1
	movq	REG64_ACCUM, REG64_ARG0
	call 	__sigsetjmp@PLT
	cmp	$0,REG32_RET0				# Which return is this?
	je	\labelend
	# This is the return when an error was unwound. Need to reduce rts_error_depth before doing anything else
	movq	gtm_threadgbl(REG_IP), REG64_SCRATCH1	# REG64_RET1 contains threadgbl base
	movl	ggo_rts_error_depth(REG64_SCRATCH1), REG32_ACCUM
	cmp	$0, REG32_ACCUM
	je	\labelskip
	subl	$1, REG32_ACCUM
	movl	REG32_ACCUM, ggo_rts_error_depth(REG64_SCRATCH1)
\labelskip:
	# This is checking for MUM_TSTART returns in which case we don't jump to "return" (outside this macro) but
	# rather just exit the ESTABLISH macro and continue as if the ESTABLISH had just been done.
	incl  	REG32_RET0
	jne  	\labelend
	REVERT
	jmp  	return
\labelend:
.endm

.macro REVERT
	movq	ctxt(REG_IP), REG64_ACCUM		# active_ch = ctxt->save_active_c
	movq	chnd_save_active(REG64_ACCUM), REG64_ACCUM
	movq	REG64_ACCUM, active_ch(REG_IP)
	subq  	$chnd_size, ctxt(REG_IP)		# ctxt--
.endm
